#pragma once
#pragma pack(push, 1)

struct CChassis;
extern CChassis* Chassis;
struct UNIT;
extern UNIT* Units;
struct VEH;
extern VEH* Vehicles;

struct BASE {
/*0000*/	short x;
/*0002*/	short y;
/*0004*/	char faction_id;
/*0005*/	char faction_id_former;
/*0006*/	char pop_size;
/*0007*/	char assimilation_turns_left;
/*0008*/	char nerve_staple_turns_left;
/*0009*/	char ai_plan_status;
/*000A*/	char factions_spotted_flags;
/*000B*/	char factions_pop_size_intel[8];
/*0013*/	char name[25];
/*002C*/	short unk_x_coord;
/*002E*/	short unk_y_coord;
/*0030*/	int status_flags;
/*0034*/	int event_flags;
/*0038*/	int governor_flags;
/*003C*/	int nutrients_accumulated;
/*0040*/	int minerals_accumulated;
/*0044*/	int production_id_last;
/*0048*/	int eco_damage;
/*004C*/	int queue_size;
/*0050*/	int queue_items[10];
/*0078*/	int worked_tiles;
/*007C*/	int specialist_total;
/*0080*/	int specialist_unk_1;
			/*
			Specialist types (R_Citizen, 4 bits per id) for the first 16 specialists in the base.
			These are assigned in base_yield and base_energy and chosen by best_specialist.
			*/
/*0084*/	int specialist_types[2];
/*008C*/	char facilities_built[12];
/*0098*/	int mineral_surplus_final;
/*009C*/	int minerals_accumulated_2;
/*00A0*/	int pad_1;
/*00A4*/	int pad_2;
/*00A8*/	int pad_3;
/*00AC*/	int pad_4;
/*00B0*/	int nutrient_intake;
/*00B4*/	int mineral_intake;
/*00B8*/	int energy_intake;
/*00BC*/	int unused_intake;
/*00C0*/	int nutrient_intake_2;
/*00C4*/	int mineral_intake_2;
/*00C8*/	int energy_intake_2;
/*00CC*/	int unused_intake_2;
/*00D0*/	int nutrient_surplus;
/*00D4*/	int mineral_surplus;
/*00D8*/	int energy_surplus;
/*00DC*/	int unused_surplus;
/*00E0*/	int nutrient_inefficiency;
/*00E4*/	int mineral_inefficiency;
/*00E8*/	int energy_inefficiency;
/*00EC*/	int unused_inefficiency;
/*00F0*/	int nutrient_consumption;
/*00F4*/	int mineral_consumption;
/*00F8*/	int energy_consumption;
/*00FC*/	int unused_consumption;
/*0100*/	int economy_total;
/*0104*/	int psych_total;
/*0108*/	int labs_total;
/*0000*/	int unk_2;
/*0000*/	short autoforward_land_base_id;
/*0000*/	short autoforward_sea_base_id;
/*0000*/	short autoforward_air_base_id;
/*0000*/	short pad_5;
/*0000*/	int talent_total;
/*0000*/	int drone_total;
/*0000*/	int superdrone_total;
/*0000*/	int random_event_turns;
/*0000*/	int nerve_staple_count;
/*0000*/	int pad_6;
/*0000*/	int pad_7;
};

struct MAP {
    byte climate; // 000 00 000 | altitude (3 bit) ; rainfall (2 bit) ; temperature (3 bit)
    byte contour; // altitude details
    /*
    flags & 0xF0:
    AI colonization priority returned by world_site()
    This is written to the map struct by site_set()
    0 = unknown/not available, 1..15 higher numbers indicate a better location.
    When AltGr+4 debug overlay is enabled, MapWin_gen_terrain_poly renders
    this number on land tiles where value > 0.
    flags & 0xF:
    Faction ID of the unit occupying this tile. 0xF = unoccupied.
    Sometimes faction ID of a deleted unit persists on the tile.
    */
    byte val2;
    /*
    The game keeps track of disjoint land/water areas and assigns each of them an ID number
    which is used to index the [128] planning variable arrays in Faction struct.
    Valid ranges: 1-62 (land), 65-126 (sea).
    */
    byte region;
    byte visibility;
    byte val3; // 00 000 000 | rocky (2 bit); lock faction_id (3 bit); using faction_id (3 bit)
    byte unk_1; // flags? bitfield
    int8_t owner;
    uint32_t items;
    uint16_t landmarks;
    byte unk_2; // 0x40 = set_dirty()
    byte art_ref_id;
    uint32_t visible_items[7];

    bool is_visible(int faction) {
        return visibility & (1 << faction);
    }
    bool is_unowned() {
        return owner < 1;
    }
    bool is_base() {
        return items & TERRA_BASE_IN_TILE;
    }
    bool is_base_radius() {
        return items & TERRA_BASE_RADIUS;
    }
    bool is_base_or_bunker() {
        return items & (TERRA_BUNKER | TERRA_BASE_IN_TILE);
    }
    int alt_level() {
        return climate >> 5;
    }
    bool is_rocky() {
        return val3 & TILE_ROCKY;
    }
    bool is_rolling() {
        return val3 & TILE_ROLLING;
    }
    bool is_rainy() {
        return climate & TILE_RAINY;
    }
    bool is_moist() {
        return climate & TILE_MOIST;
    }
    bool is_rainy_or_moist() {
        return climate & (TILE_MOIST | TILE_RAINY);
    }
};

struct MFaction {
    int is_leader_female;
    char filename[24];
    char search_key[24];
    char name_leader[24];
    char title_leader[24];
    char adj_leader[128];
    char adj_insult_leader[128];
    char adj_faction[128];
    char adj_insult_faction[128];
    /*
    Thinker-specific save game variables.
    */
    short thinker_header;
    char thinker_flags;
    char thinker_tech_id;
    int thinker_tech_cost;
    /*
    Exponentially weighted moving average of distances to nearest enemy bases.
    This is updated while choosing base production, and it is used as a
    general heuristic to determine the level of threat from other factions.
    When no enemies are present, the range is capped at 40.
    */
    float thinker_enemy_range;
    char pad_1[116];
    /*
    End of block
    */
    char noun_faction[24];
    int noun_gender;
    int is_noun_plural;
    char adj_name_faction[128];
    char formal_name_faction[40];
    char insult_leader[24];
    char desc_name_faction[24];
    char assistant_name[24];
    char scientist_name[24];
    char assistant_city[24];
    char pad_2[176];
    int rule_tech_selected;
    int rule_morale;
    int rule_research;
    int rule_drone;
    int rule_talent;
    int rule_energy;
    int rule_interest;
    int rule_population;
    int rule_hurry;
    int rule_techcost;
    int rule_psi;
    int rule_sharetech;
    int rule_commerce;
    int rule_flags;
    int faction_bonus_count;
    int faction_bonus_id[8];
    int faction_bonus_val1[8];
    int faction_bonus_val2[8];
    int AI_fight;
    int AI_growth;
    int AI_tech;
    int AI_wealth;
    int AI_power;
    int soc_priority_category;
    int soc_opposition_category;
    int soc_priority_model;
    int soc_opposition_model;
    int soc_priority_effect;
    int soc_opposition_effect;
};

struct Goal {
    short type;
    short priority;
    int x;
    int y;
    int base_id;
};

struct Faction {
/*0000*/	int player_flags;
/*0004*/	int ranking; // 0 (lowest) to 7 (highest)
/*0008*/	int diff_level;
/*000C*/	int base_name_offset; // Keep track which base names have been used
/*0010*/	int base_sea_name_offset; // Keep track which sea base names have been used
/*0014*/	int last_base_turn; // Turn for last built, captured or acquired (drone riot) base
/*0018*/	int diplo_status[8]; // Contains all formal treaties
/*0038*/	int diplo_agenda[8];
/*0058*/	int diplo_friction[8];
/*0078*/	int diplo_spoke[8]; // Turn for the last player-to-AI communication; -1 for never
/*0098*/	int diplo_merc[8]; // Possibly higher values indicate willingness for deal-making
/*00B8*/	char diplo_patience[8]; // AI-to-player
/*00C0*/	int sanction_turns; // Turns left for economic sanctions imposed by other factions for atrocities
/*00C4*/	int loan_balance[8]; // Loan balance remaining this faction owes another to be paid over term
/*00D4*/	int loan_payment[8]; // The per turn payment amount this faction owes another faction
/*0104*/	int unk_1[8]; // unused
/*0124*/	int integrity_blemishes;
/*0128*/	int global_reputation;
/*012C*/	int diplo_gifts[8]; // ? Gifts and bribes we have received
/*014C*/	int diplo_wrongs[8]; // Number of times we double crossed this faction
/*016C*/	int diplo_betrayed[8]; // Number of times double crossed by this faction
/*018C*/	int diplo_unk_3[8]; // ? combat related
/*01AC*/	int diplo_unk_4[8]; // ? combat related
/*01EC*/	int traded_maps; // bitfield of other factions that have traded maps with faction
/*01D0*/	int base_governor_adv; // default advanced Governor settings
/*01D4*/	int atrocities; // count committed by faction
/*01D8*/	int major_atrocities; // count committed by faction
/*01DC*/	int subvert_total; // ? probe: mind control base (+4) / subvert unit (+1) total
/*01E0*/	int diplo_subvert[8]; // ? probe: mind control base (+4) / subvert unit (+1) per faction
/*0200*/	int diplo_stolen_techs[8]; // probe: successfully procured research data (tech/map) per faction
/*0220*/	int energy_credits;
/*0224*/	int energy_cost;
/*0228*/	int SE_Politics_pending;
/*022C*/	int SE_Economics_pending;
/*0230*/	int SE_Values_pending;
/*0234*/	int SE_Future_pending;
/*0238*/	int SE_Politics;
/*023C*/	int SE_Economics;
/*0240*/	int SE_Values;
/*0244*/	int SE_Future;
/*0248*/	int SE_upheaval_cost_paid;
/*024C*/	int SE_economy_pending;
/*0250*/	int SE_effic_pending;
/*0254*/	int SE_support_pending;
/*0258*/	int SE_talent_pending;
/*025C*/	int SE_morale_pending;
/*0260*/	int SE_police_pending;
/*0264*/	int SE_growth_pending;
/*0268*/	int SE_planet_pending;
/*026C*/	int SE_probe_pending;
/*0270*/	int SE_industry_pending;
/*0274*/	int SE_research_pending;
/*0278*/	int SE_economy;
/*027C*/	int SE_effic;
/*0280*/	int SE_support;
/*0284*/	int SE_talent;
/*0288*/	int SE_morale;
/*028C*/	int SE_police;
/*0290*/	int SE_growth;
/*0294*/	int SE_planet;
/*0298*/	int SE_probe;
/*029C*/	int SE_industry;
/*02A0*/	int SE_research;
/*02A4*/	int SE_economy_2;
/*02A8*/	int SE_effic_2;
/*02AC*/	int SE_support_2;
/*02B0*/	int SE_talent_2;
/*02B4*/	int SE_morale_2;
/*02B8*/	int SE_police_2;
/*02BC*/	int SE_growth_2;
/*02C0*/	int SE_planet_2;
/*02C4*/	int SE_probe_2;
/*02C8*/	int SE_industry_2;
/*02CC*/	int SE_research_2;
/*02D0*/	int SE_economy_base;
/*02D4*/	int SE_effic_base;
/*02D8*/	int SE_support_base;
/*02DC*/	int SE_talent_base;
/*02E0*/	int SE_morale_base;
/*02E4*/	int SE_police_base;
/*02E8*/	int SE_growth_base;
/*02EC*/	int SE_planet_base;
/*02F0*/	int SE_probe_base;
/*02F4*/	int SE_industry_base;
/*02F8*/	int SE_research_base;
/*02FC*/	int unk_13;
/*0300*/	int unk_14;
/*0304*/	int tech_commerce_bonus; // Increases commerce income
/*0308*/	int turn_commerce_income;
/*030C*/	int unk_17;
/*0310*/	int unk_18;
/*0314*/	int tech_fungus_nutrient;
/*0318*/	int tech_fungus_mineral;
/*031C*/	int tech_fungus_energy;
/*0320*/	int unk_22;
/*0324*/	int SE_alloc_psych;
/*0328*/	int SE_alloc_labs;
/*032C*/	int unk_25;
/*0330*/	int unk_26[11]; // unused
/*035C*/	int tech_ranking; // Twice the number of techs discovered
/*0360*/	int unk_27;
/*0364*/	int ODP_deployed;
/*0368*/	int theory_of_everything;
/*036C*/	char tech_trade_source[92];
/*03C8*/	int tech_accumulated;
/*03CC*/	int tech_research_id;
/*03D0*/	int tech_cost;
/*03D4*/	int earned_techs_saved;
/*03D8*/	int net_random_event;
/*0000*/	int AI_fight;
/*0000*/	int AI_growth;
/*0000*/	int AI_tech;
/*0000*/	int AI_wealth;
/*0000*/	int AI_power;
/*0000*/	int target_x;
/*0000*/	int target_y;
/*0000*/	int unk_28;
/*0000*/	int council_call_turn;
/*0000*/	int unk_29[11]; // Council related
/*0000*/	int unk_30[11]; // Council related
/*0000*/	byte facility_announced[4]; // bitfield - used to determine one time play of fac audio blurb
/*0000*/	int unk_32;
/*0000*/	int unk_33;
/*0000*/	int clean_minerals_modifier; // Starts from zero and increases by one after each fungal pop.
/*0000*/	int unk_36;
/*0000*/	int unk_37;
/*0000*/	char saved_queue_name[8][24];
/*0000*/	int saved_queue_size[8];
/*0000*/	int saved_queue_items[8][10];
/*0000*/	int unk_40[8];
/*0000*/	int unk_41[40];
/*0000*/	int unk_42[32];
/*0000*/	int unk_43[8];
/*0000*/	int unk_44;
/*0000*/	int unk_45;
/*0000*/	int unk_46;
/*0000*/	int unk_47;
/*0000*/	int nutrient_surplus_total;
/*0000*/	int labs_total;
/*0000*/	int satellites_nutrient;
/*0000*/	int satellites_mineral;
/*0000*/	int satellites_energy;
/*0000*/	int satellites_ODP;
/*0000*/	int best_weapon_value;
/*0000*/	int best_psi_land_offense;
/*0000*/	int best_psi_land_defense;
/*0000*/	int best_armor_value;
/*0000*/	int best_land_speed;
/*0000*/	int enemy_best_weapon_value; // Enemy refers here to any non-pact faction
/*0000*/	int enemy_best_armor_value;
/*0000*/	int enemy_best_land_speed;
/*0000*/	int enemy_best_psi_land_offense;
/*0000*/	int enemy_best_psi_land_defense;
/*0000*/	int unk_64;
/*0000*/	int unk_65;
/*0000*/	int unk_66;
/*0000*/	int unk_67;
/*0000*/	int unk_68;
/*0000*/	int unk_69;
/*0000*/	byte units_active[512];
/*0000*/	byte units_queue[512];
/*0000*/	short units_lost[512];
/*0000*/	int total_combat_units;
/*0000*/	int current_num_bases;
/*0000*/	int mil_strength_1;
/*0000*/	int mil_strength_2;
/*0000*/	int pop_total;
/*0000*/	int unk_70;
/*0000*/	int planet_busters;
/*0000*/	int unk_71;
/*0000*/	int unk_72;
			/*
			AI planning variables that relate to faction units in specific disjoint land/water areas.
			All of these are indexed by the region value in MAP struct.
			*/
/*0000*/	short region_total_combat_units[128];
/*0000*/	byte region_total_bases[128];
/*0000*/	byte region_total_offensive_units[128];
/*0000*/	short region_force_rating[128]; // Combined offensive/morale rating of all units in the area
/*0000*/	short region_flags[128]; // Movement planning flags
/*0000*/	short region_territory_tiles[128];
/*0000*/	short region_visible_tiles[128];
/*0000*/	short region_good_tiles[128];
/*0000*/	short region_unk_5[128]; // Unknown reset_territory/enemy_move counter
/*0000*/	byte region_unk_6[128]; // Unknown enemy_strategy state
/*0000*/	byte region_territory_goodies[128];
/*0000*/	byte region_base_plan[128]; // visible in map UI with omni view + debug mode under base name
/*0000*/	/* End of block */
/*0000*/	Goal goals[75];
/*0000*/	Goal sites[25];
/*0000*/	int unk_92;
/*0000*/	int unk_93;
/*0000*/	int unk_94;
/*0000*/	int unk_95;
/*0000*/	int unk_96;
/*0000*/	int unk_97;
/*0000*/	int unk_98;
/*0000*/	int unk_99;
/*0000*/	int unk_100[8];
/*0000*/	int corner_market_turn;
/*0000*/	int corner_market_active;
/*0000*/	int unk_101;
/*0000*/	int unk_102;
/*0000*/	int unk_103;
/*0000*/	int player_flags_ext;
/*0000*/	int unk_105;
/*0000*/	int unk_106;
/*0000*/	int unk_107;
/*0000*/	int unk_108;
			/*
			Thinker variables in the old save game format.
			*/
/*0000*/	short old_thinker_header;
/*0000*/	char old_thinker_flags;
/*0000*/	char old_thinker_tech_id;
/*0000*/	int old_thinker_tech_cost;
/*0000*/	float old_thinker_enemy_range;
/*0000*/	int padding[7];
};

struct CRules {
    int mov_rate_along_roads;
    int nutrient_intake_req_citizen;
    int max_airdrop_rng_wo_orbital_insert;
    int artillery_max_rng;
    int artillery_dmg_numerator;
    int artillery_dmg_denominator;
    int nutrient_cost_multi;
    int mineral_cost_multi;
    int rules_tech_discovery_rate;
    int limit_mineral_inc_for_mine_wo_road;
    int nutrient_effect_mine_sq;
    int min_base_size_specialists;
    int drones_induced_genejack_factory;
    int pop_limit_wo_hab_complex;
    int pop_limit_wo_hab_dome;
    int tech_preq_improv_fungus;
    int tech_preq_ease_fungus_mov;
    int tech_preq_build_road_fungus;
    int tech_preq_allow_2_spec_abil;
    int tech_preq_allow_3_nutrients_sq;
    int tech_preq_allow_3_minerals_sq;
    int tech_preq_allow_3_energy_sq;
    int extra_cost_prototype_land;
    int extra_cost_prototype_sea;
    int extra_cost_prototype_air;
    int psi_combat_land_numerator;
    int psi_combat_sea_numerator;
    int psi_combat_air_numerator;
    int psi_combat_land_denominator;
    int psi_combat_sea_denominator;
    int psi_combat_air_denominator;
    int starting_energy_reserve;
    int combat_bonus_intrinsic_base_def;
    int combat_bonus_atk_road;
    int combat_bonus_atk_higher_elevation;
    int combat_penalty_atk_lwr_elevation;
    int tech_preq_orb_insert_wo_space;
    int min_turns_between_councils;
    int minerals_harvesting_forest;
    int territory_max_dist_base;
    int turns_corner_global_energy_market;
    int tech_preq_mining_platform_bonus;
    int tech_preq_economic_victory;
    int combat_penalty_atk_airdrop;
    int combat_bonus_fanatic;
    int combat_land_vs_sea_artillery;
    int combat_artillery_bonus_altitude;
    int combat_mobile_open_ground;
    int combat_mobile_def_in_rough;
    int combat_bonus_trance_vs_psi;
    int combat_bonus_empath_song_vs_psi;
    int combat_infantry_vs_base;
    int combat_penalty_air_supr_vs_ground;
    int combat_bonus_air_supr_vs_air;
    int combat_penalty_non_combat_vs_combat;
    int combat_comm_jammer_vs_mobile;
    int combat_bonus_vs_ship_port;
    int combat_AAA_bonus_vs_air;
    int combat_defend_sensor;
    int combat_psi_bonus_per_PLANET;
    int retool_strictness;
    int retool_penalty_prod_change;
    int retool_exemption;
    int tgl_probe_steal_tech;
    int tgl_humans_always_contact_tcp;
    int tgl_humans_always_contact_pbem;
    int max_dmg_percent_arty_base_bunker;
    int max_dmg_percent_arty_open;
    int max_dmg_percent_arty_sea;
    int freq_global_warming_numerator;
    int freq_global_warming_denominator;
    int normal_start_year;
    int normal_ending_year_lowest_3_diff;
    int normal_ending_year_highest_3_diff;
    int tgl_oblit_base_atrocity;
    int base_size_subspace_gen;
    int subspace_gen_req;
};

struct CResource {
    int ocean_sq_nutrient;
    int ocean_sq_mineral;
    int ocean_sq_energy;
    int pad_0;
    int base_sq_nutrient;
    int base_sq_mineral;
    int base_sq_energy;
    int pad_1;
    int bonus_sq_nutrient;
    int bonus_sq_mineral;
    int bonus_sq_energy;
    int pad_2;
    int forest_sq_nutrient;
    int forest_sq_mineral;
    int forest_sq_energy;
    int pad_3;
    int recycling_tanks_nutrient;
    int recycling_tanks_mineral;
    int recycling_tanks_energy;
    int pad_4;
    int improved_land_nutrient;
    int improved_land_mineral;
    int improved_land_energy;
    int pad_5;
    int improved_sea_nutrient;
    int improved_sea_mineral;
    int improved_sea_energy;
    int pad_6;
    int monolith_nutrient;
    int monolith_mineral;
    int monolith_energy;
    int pad_7;
    int borehole_sq_nutrient;
    int borehole_sq_mineral;
    int borehole_sq_energy;
    int pad_8;
};

struct CSocial {
    char* field_name;
    int   soc_preq_tech[4];
    char* soc_name[4];
    int   effects[4][11];
};

struct CFacility {
    char* name;
    char* effect;
    int pad;
    int cost;
    int maint;
    int preq_tech;
    int free;
    int AI_fight;
    int AI_growth;
    int AI_tech;
    int AI_wealth;
    int AI_power;
};

struct CTech {
    int flags;
    char* name;
    char short_name[12];
    int AI_growth;
    int AI_tech;
    int AI_wealth;
    int AI_power;
    int preq_tech1;
    int preq_tech2;
};

struct CAbility {
    char* name;
    char* description;
    char* abbreviation;
    int cost;
    int unk_1;
    int flags;
    short preq_tech;
    short pad;
};

struct CChassis {
    char* offsv1_name;
    char* offsv2_name;
    char* offsv_name_lrg;
    char* defsv1_name;
    char* defsv2_name;
    char* defsv_name_lrg;
    int offsv1_gender;
    int offsv2_gender;
    int offsv_gender_lrg;
    int defsv1_gender;
    int defsv2_gender;
    int defsv_gender_lrg;
    int offsv1_is_plural;
    int offsv2_is_plural;
    int offsv_is_plural_lrg;
    int defsv1_is_plural;
    int defsv2_is_plural;
    int defsv_is_plural_lrg;
    char speed;
    char triad;
    char range;
    char cargo;
    char cost;
    char missile;
    char sprite_flag_x_coord[8];
    char sprite_flag_y_coord[8];
    char sprite_unk1_x_coord[8];
    char sprite_unk1_y_coord[8];
    char sprite_unk2_x_coord[8];
    char sprite_unk2_y_coord[8];
    char sprite_unk3_x_coord[8];
    char sprite_unk3_y_coord[8];
    short preq_tech;
};

struct CCitizen {
    char* singular_name;
    char* plural_name;
    int preq_tech;
    int obsol_tech;
    int ops_bonus;
    int psych_bonus;
    int research_bonus;
};

struct CDefense {
    char* name;
    char* name_short;
    char defense_value;
    char mode;
    char cost;
    char padding1;
    short preq_tech;
    short padding2;
};

struct CReactor {
    char* name;
    char* name_short;
    short preq_tech;
    short padding;
};

struct CTerraform {
    char* name;
    char* name_sea;
    int preq_tech;
    int preq_tech_sea;
    int flag;
    int flag_sea;
    int rate;
    char* shortcuts;
};

struct CWeapon {
    char* name;
    char* name_short;
    char offense_value;
    char icon;
    char mode;
    char cost;
    short preq_tech;
    short padding;
};

struct UNIT {
    char name[32];
    int ability_flags;
    char chassis_type;
    char weapon_type;
    char armor_type;
    char reactor_type;
    char carry_capacity;
    char cost;
    char unit_plan;
    char unk_1; // some kind of internal prototype category?
    char obsolete_factions;// faction bitfield of those who marked this prototype obsolete
    char combat_factions; // faction bitfield for those that have seen this unit in combat (atk/def)
    char icon_offset;
    char pad_1; // unused
    short unit_flags;
    short preq_tech;

    int triad() {
        return Chassis[(int)chassis_type].triad;
    }
    int speed() {
        return Chassis[(int)chassis_type].speed;
    }
};

struct VEH {
    short x;					//0000
    short y;					//0002
    int state;					//0004
    short flags;				//0008
    short unit_id;				//000A
    short pad_0; // unused		//000C
    char faction_id;			//000E
    char year_end_lurking;		//000F
    char damage_taken;			//0010
    char move_status;			//0011
    char waypoint_count;		//0012
    char patrol_current_point;	//0013
    short waypoint_1_x;			//0014
    short waypoint_2_x;
    short waypoint_3_x;
    short waypoint_4_x;
    short waypoint_1_y;
    short waypoint_2_y;
    short waypoint_3_y;
    short waypoint_4_y;
    char morale;				//0024
    char terraforming_turns;	//0025
    char type_crawling;			//0026
    byte visibility;			//0027
    char road_moves_spent;		//0028
    char rotate_angle;
    char iter_count;
    char status_icon;
    char probe_action;
    char probe_sabotage_id;
    short home_base_id;
    short next_unit_id_stack;
    short prev_unit_id_stack;

    const char* name() {
        return Units[unit_id].name;
    }
    int triad() {
        return Chassis[(int)Units[unit_id].chassis_type].triad;
    }
    int weapon_type() {
        return Units[unit_id].weapon_type;
    }
    bool is_combat_unit() {
        return Units[unit_id].weapon_type <= WPN_PSI_ATTACK && unit_id != BSC_FUNGAL_TOWER;
    }
    bool is_probe() {
        return Units[unit_id].weapon_type == WPN_PROBE_TEAM;
    }
    bool is_visible(int faction) {
        return visibility & (1 << faction);
    }
};

#pragma pack(pop)

